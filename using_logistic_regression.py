# -*- coding: utf-8 -*-
"""Using_Logistic_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3PuuLG7rXG537da5i6Jsi3RK-tcb5ld

### **IMPORT**
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from building_logistic_regression_model_ import Logistic_Regression

# loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# printing the first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and Columns in this dataset
diabetes_dataset.shape


# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

"""# separating the data and labels

"""

features = diabetes_dataset.drop(columns = 'Outcome', axis=1)
target = diabetes_dataset['Outcome']

"""# **Data Standardization**"""

scaler = StandardScaler()

scaler.fit(features)

standardized_data = scaler.transform(features)

features = standardized_data
target = diabetes_dataset['Outcome']

"""# **Train Test Split**"""

X_train, X_test, Y_train, Y_test = train_test_split(features,target, test_size = 0.2, random_state=2)


print(features.shape, X_train.shape, X_test.shape)

"""# **Training the Model**"""

classifier = Logistic_Regression(learning_rate=0.01, no_of_iterations=1000)

"""training the support vector Machine Classifier

"""

classifier.fit(X_train, Y_train)

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score( Y_train, X_train_prediction)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score( Y_test, X_test_prediction)

print('Accuracy score of the test data : ', test_data_accuracy)

## Making a Predictive System


input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

