# -*- coding: utf-8 -*-
"""SAH .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1OWb6dLG7rQQi_kCM3qrEhYyngt_YpR

## **IMPORT**
"""

pip install shap

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **Data**"""

data=pd.read_csv('/content/mail_data.csv')

"""# Missing **Values**"""

data = data.where(pd.notnull(data), '')

"""## **Label encoding**"""

data.loc[data['Category'] == 'spam', 'Category'] = 0
data.loc[data['Category'] == 'ham', 'Category'] = 1

# Features and Labels
X = data['Message']
Y = data['Category']

# Train Test Split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Feature Extraction
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=1)
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Labels to integers
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

# Training the model
model = LogisticRegression()
model.fit(X_train_features, Y_train)

# Evaluation
prediction_on_train = model.predict(X_train_features)
accuracy_on_train = accuracy_score(Y_train, prediction_on_train)

prediction_on_test = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test)

# Predictive System
input_text = ["I've been searching for the right words to thank you for this br"]

# Feature Extraction
input_features = feature_extraction.transform(input_text)

# Prediction
result = model.predict(input_features)

if result[0] == 1:
    print('Ham')
else:
    print('Spam')